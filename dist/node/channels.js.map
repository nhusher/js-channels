{"version":3,"sources":["channels.js"],"names":[],"mappings":"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","file":"channels.js","sourcesContent":["\nimport { FixedBuffer, RingBuffer } from \"./buffers.js\";\nimport { Dispatch } from \"./dispatch.js\";\nimport { Promise } from \"./promise.js\";\nimport { transducers } from \"./transducers.js\";\n\n// --------------------------------------------------------------------------\n\nclass Transactor {\n  constructor(offer) {\n    this.offered = offer;\n    this.received = null;\n    this.resolved = false;\n    this.active = true;\n    this.callbacks = [];\n  }\n\n  commit() {\n    return (val) => {\n      if(this.resolved) {\n        throw new Error(\"Tried to resolve transactor twice!\");\n      }\n      this.received = val;\n      this.resolved = true;\n      this.callbacks.forEach(c => c(val));\n\n      return this.offered;\n    };\n  }\n\n  deref(callback) {\n    if(this.resolved) {\n      callback(this.received);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n}\n\n\n// --------------------------------------------------------------------------\n\nlet dispatch = new Dispatch();\n\nclass Channel {\n  constructor(sizeOrBuf, xform) {\n    if(!transducers && xform) {\n      console.info(\"Using a transducer requires transducers-js <https://github.com/cognitect-labs/transducers-js>\");\n    }\n    if(!sizeOrBuf && xform && transducers) {\n      console.info(\"Transducers will be ignored for unbuffered channels.\");\n    }\n\n    // Adds value to the buffer:\n    // doAdd() => Buffer\n    // doAdd(val) => Buffer\n    let doAdd = (buf, val) => buf.add(val);\n\n    this._buffer    = (sizeOrBuf instanceof FixedBuffer) ? sizeOrBuf : new FixedBuffer(sizeOrBuf || 0);\n    this._takers    = new RingBuffer(32);\n    this._putters   = new RingBuffer(32);\n    this._xformer   = xform && transducers ? xform(transducers.wrap(doAdd)) : doAdd;\n\n    this._isOpen = true;\n  }\n\n  _insert(val) {\n    if(transducers) {\n      if(val) {\n        return this._xformer.step(this._buffer, val);\n      } else {\n        return this._xformer.result(this._buffer);\n      }\n    } else if(val) {\n      this._xformer(this._buffer, val);\n    }\n    return false;\n  }\n\n  fill(val, tx = new Transactor(val)) {\n    if(val === null) { throw new Error(\"Cannot put null to a channel.\"); }\n    if(!(tx instanceof Transactor)) { throw new Error(\"Expecting Transactor to be passed to fill\"); }\n    if(!tx.active) { return tx; }\n\n    if(!this.open) {\n      // Either somebody has resolved the handler already (that was fast) or the channel is closed.\n      // core.async returns a boolean of whether or not something *could* get put to the channel\n      // we'll do the same #cargocult\n      tx.commit()(false);\n    }\n\n    if(!this._buffer.full) {\n      // The channel has some free space. Stick it in the buffer and then drain any waiting takes.\n      tx.commit()(true);\n\n      let done = transducers ? transducers.reduced(this._insert(val)) : this._insert(val);\n\n      while(this._takers.length && this._buffer.length) {\n        let takerTx = this._takers.pop();\n\n        if(takerTx.active) {\n          let v = this._buffer.remove();\n          let takerCb = takerTx.commit();\n\n          dispatch.run(() => takerCb(v));\n        }\n      }\n      if(done) {\n        this.close();\n      }\n\n      return tx;\n    } else if(this._takers.length) {\n      // The buffer is full but there are waiting takers (e.g. the buffer is size zero)\n\n      let takerTx = this._takers.pop();\n\n      while(this._takers.length && !takerTx.active) {\n        takerTx = this._takers.pop();\n      }\n\n      if(takerTx && takerTx.active) {\n        tx.commit()(true);\n        let takerCb = takerTx.commit();\n\n        dispatch.run(() => takerCb(val));\n      } else {\n        this._putters.resizingUnshift(tx);\n      }\n    } else {\n      this._putters.resizingUnshift(tx);\n    }\n\n    return tx;\n  }\n\n  put(val, transactor) {\n    return new Promise(resolve => {\n      this.fill(val, transactor).deref(resolve);\n    });\n  }\n\n  drain(tx = new Transactor()) {\n    if(!(tx instanceof Transactor)) { throw new Error(\"Expecting Transactor to be passed to drain\"); }\n    if(!tx.active) { return tx; }\n\n    if(this._buffer.length) {\n      let bufVal = this._buffer.remove();\n\n      while(!this._buffer.full && this._putters.length) {\n        let putter = this._putters.pop();\n\n        if(putter.active) {\n          let putTx = putter.commit(),\n              val = putter.offered; // Kinda breaking the rules here\n\n          dispatch.run(() => putTx());\n          this._insert(val);\n        }\n      }\n\n      tx.commit()(bufVal);\n    } else if(this._putters.length) {\n      let putter = this._putters.pop();\n\n      while(this._putters.length && !putter.active) {\n        putter = this._putters.pop();\n      }\n\n      if(putter && putter.active) {\n        let txCb = tx.commit(),\n            putTx = putter.commit(),\n            val = putter.offered;\n\n        dispatch.run(() => putTx());\n        txCb(val);\n      } else if(!this.open) {\n        this._insert();\n\n        let txCb = tx.commit();\n\n        if(this._buffer.length) {\n          txCb(this._buffer.remove());\n        } else {\n          txCb(null);\n        }\n      } else {\n        this._takers.resizingUnshift(tx);\n      }\n    } else {\n      this._takers.resizingUnshift(tx);\n    }\n\n    return tx;\n  }\n\n  take(transactor) {\n    return new Promise(resolve => {\n      this.drain(transactor).deref(resolve);\n    });\n  }\n\n  then(fn, err) {\n    return this.take().then(fn, err);\n  }\n\n  close() {\n    if(this.open) {\n      this._isOpen = false;\n\n      if(this._putters.length === 0) {\n        this._insert();\n      }\n\n      while (this._takers.length) {\n        let taker = this._takers.pop();\n\n        if(taker.active) {\n          let val = this._buffer.length ? this._buffer.remove() : null,\n              takerCb = taker.commit();\n\n          dispatch.run(() => takerCb(val));\n        }\n      }\n    }\n  }\n\n  get open() {\n    return this._isOpen;\n  }\n}\n\nexport { Channel, Transactor };"],"sourceRoot":"/source/"}