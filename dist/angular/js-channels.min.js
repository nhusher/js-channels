angular.module("channels",[]),angular.module("channels").service("jschBuffers",function(){function t(t,n,e,r,i){for(var u=0;i>u;u+=1)e[u+r]=t[u+n]}var n={},e=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},r=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},u=function(){function n(t){i(this,n);var e="number"==typeof t?Math.max(1,t):1;this._tail=0,this._head=0,this._length=0,this._values=new Array(e)}return r(n,{pop:{value:function(){var t=void 0;return this.length?(t=null!==this._values[this._tail]?this._values[this._tail]:null,this._values[this._tail]=null,this._tail=(this._tail+1)%this._values.length,this._length-=1):t=null,t}},unshift:{value:function(t){this._values[this._head]=t,this._head=(this._head+1)%this._values.length,this._length+=1}},resizingUnshift:{value:function(t){this.length+1===this._values.length&&this.resize(),this.unshift(t)}},resize:{value:function(){var n=new Array(2*this._values.length);this._tail<this._head?(t(this._values,this._tail,n,0,this._head),this._tail=0,this._head=this.length,this._values=n):this._head<this._tail?(t(this._values,0,n,this._values.length-this._tail,this._head),this._tail=0,this._head=this.length,this._values=n):(this._tail=0,this._head=0,this._values=n)}},length:{get:function(){return this._length}}}),n}(),o=function(){function t(n){i(this,t),this._buf=new u(n),this._size=n}return r(t,{remove:{value:function(){return this._buf.pop()}},add:{value:function(t){this._buf.resizingUnshift(t)}},length:{get:function(){return this._buf.length}},full:{get:function(){return this._buf.length===this._size}}}),t}(),a=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length<this._size&&this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o),s=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length===this._size&&this.remove(),this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o);return n.DroppingBuffer=a,n.SlidingBuffer=s,n.FixedBuffer=o,n.RingBuffer=u,n}),angular.module("channels").service("jschChannel",["jschBuffers","jschDispatch","jschPromise",function(t,n,e){var r={},i=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},o=t.FixedBuffer,a=t.RingBuffer,s=n.Dispatch,f=e.Promise,c=function(){function t(n){u(this,t),this.offered=n,this.received=null,this.resolved=!1,this.active=!0,this.callbacks=[]}return i(t,{commit:{value:function(){var t=this;return function(n){if(t.resolved)throw new Error("Tried to resolve transactor twice!");return t.received=n,t.resolved=!0,t.callbacks.forEach(function(t){return t(n)}),t.offered}}},deref:{value:function(t){this.resolved?t(this.received):this.callbacks.push(t)}}}),t}(),h=new s,l=function(){function t(n){u(this,t),this._buffer=n instanceof o?n:new o(n||0),this._takers=new a(32),this._putters=new a(32),this._isOpen=!0}return i(t,{fill:{value:function(t){var n=this,e=void 0===arguments[1]?new c(t):arguments[1];return function(){if(null===t)throw new Error("Cannot put null to a channel.");if(!(e instanceof c))throw new Error("Expecting Transactor to be passed to fill");if(!e.active)return e;if(n.open||e.commit()(!1),!n._buffer.full){for(e.commit()(!0),n._buffer.add(t);n._takers.length&&n._buffer.length;){var r=n._takers.pop();r.active&&!function(){var t=n._buffer.remove(),e=r.commit();h.run(function(){return e(t)})}()}return e}if(n._takers.length){for(var r=n._takers.pop();n._takers.length&&!r.active;)r=n._takers.pop();r&&r.active?!function(){e.commit()(!0);var n=r.commit();h.run(function(){return n(t)})}():n._putters.resizingUnshift(e)}else n._putters.resizingUnshift(e);return e}()}},put:{value:function(t,n){var e=this;return new f(function(r){e.fill(t,n).deref(r)})}},drain:{value:function(){var t=this,n=void 0===arguments[0]?new c:arguments[0];if(!(n instanceof c))throw new Error("Expecting Transactor to be passed to drain");if(!n.active)return n;if(this._buffer.length){for(var e=this._buffer.remove();!this._buffer.full&&this._putters.length;){var r=this.putters.pop();r.active&&!function(){var n=r.commit();h.run(function(){return t._buffer.add(n())})}()}n.commit()(e)}else if(this._putters.length){for(var i=this._putters.pop();this._putters.length&&!i.active;)i=this._putters.pop();i&&i.active?!function(){var t=n.commit(),e=i.commit();h.run(function(){return t(e())})}():this._takers.resizingUnshift(n)}else this._takers.resizingUnshift(n);return n}},take:{value:function(t){var n=this;return new f(function(e){n.drain(t).deref(e)})}},then:{value:function(t,n){return this.take().then(t,n)}},close:{value:function(){for(this._isOpen=!1;this._takers.length;){var t=this._takers.pop();t.active&&t.commit()(null)}}},open:{get:function(){return this._isOpen}}}),t}();return r.Channel=l,r.Transactor=c,r}]),angular.module("channels").service("jschDispatch",function(){var t={},n=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),e=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},r="function"==typeof setImmediate?function(t){return setImmediate(t)}:function(t){return setTimeout(t)},i=function(){function t(n){e(this,t),this._asynchronizer=n||r,this._queue=[]}return n(t,{run:{value:function(t){var n=this;this._queue.push(t),this._asynchronizer(function(){for(;n._queue.length;)n._queue.shift()()})}}}),t}();return t.Dispatch=i,t}),angular.module("channels").service("jschMult",["jschPromise",function(t){function n(t,e){if(!t.length)return o.resolve();var i,u=function(){i=r(t);var u=i[0],o=i.slice(1);return{v:u.put(e).then(function(){return n(o,e)})}}();return"object"==typeof u?u.v:void 0}var e={},r=function(t){return Array.isArray(t)?t:Array.from(t)},i=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},o=t.Promise,a=function(){function t(e){u(this,t),this._taps=[],this._free=o.resolve(),e.take().then(function r(t){if(null!==t){var i=void 0,u=new o(function(t){return i=t});this._free=u,n(taps,t).then(function(){i(),e.take().then(r)})}}.bind(this))}return i(t,{tap:{value:function(t,n){var e=this;if(this._taps.some(function(n){return n.ch===t}))throw new Error("Can't add the same channel to a mult twice");return this._free.then(function(){return e._taps.push({close:n,ch:t}),t})}},untap:{value:function(t){var n=this;return this._free.then(function(){return n._taps=n._taps.filter(function(n){return n.ch!==t}),t})}}}),t}();return e.Mult=a,e}]),angular.module("channels").service("jschUtils",["jschChannel",function(t){function n(t){var n=[],e=new l;return t.map(function(t){if(Array.isArray(t)){var r;!function(){var i=new p(o,function(){n.forEach(function(t){return t.active=!1})});r=a(t,2);var u=r[0],o=r[1];u.put(o,i).then(function(){e.put([o,u])}),n.push(i)}()}else{var i=new p(!0,function(){n.forEach(function(t){return t.active=!1})});t.take(i).then(function(n){e.put([n,t])}),n.push(i)}}),e}function e(t){var n=new l;return setTimeout(function(){n.close()},t),n}function r(t,n){var e=void 0===arguments[2]?!0:arguments[2];t.take().then(function r(i){null!==i?n.put(i).then(function(){return t.take().then(r)}):e&&n.close()})}function i(t){var n=[];return t.take().then(function e(r){return null===r?n:(n.push(r),t.take().then(e))})}function u(t,n){function e(){t.take().then(function(t){null===t?r.close():r.put(t).then(e)})}var r=new l(n);return e(),r}var o={},a=function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){for(var e,r=[],i=t[Symbol.iterator]();!(e=i.next()).done&&(r.push(e.value),!n||r.length!==n););return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")},s=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),f=function _(t,n,e){var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:_(i,n,e)}if("value"in r&&r.writable)return r.value;var u=r.get;return void 0===u?void 0:u.call(e)},c=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},h=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},l=t.Channel,v=t.Transactor,p=function(t){function n(t,e){h(this,n),f(Object.getPrototypeOf(n.prototype),"constructor",this).call(this,t),this.commitCb=e}return c(n,t),s(n,{commit:{value:function(){return this.commitCb(),f(Object.getPrototypeOf(n.prototype),"commit",this).call(this)}}}),n}(v);return o.alts=n,o.timeout=e,o.pipe=r,o.intoArray=i,o.order=u,o}]),angular.module("channels").service("jschPromise",["$q",function(t){var n={},e=function(n){return t(n)};return e.all=t.all,e.reject=t.reject,e.race=function(n){var e,r,i;return i=t(function(t,n){e=t,r=n}),n.forEach(function(t){return t.then(e,r)}),i},e.resolve=function(n){return t.when(n)},n.Promise=e,n}]);
//# sourceMappingURL=data:application/json;base64,