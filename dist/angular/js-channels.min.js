angular.module("channels",[]),angular.module("channels").service("asyncBuffers",function(){function t(t,n,e,r,i){for(var u=0;i>u;u+=1)e[u+r]=t[u+n]}var n={},e=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},r=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},u=function(){function n(t){i(this,n);var e="number"==typeof t?Math.max(1,t):1;this._tail=0,this._head=0,this._length=0,this._values=new Array(e)}return r(n,{pop:{value:function(){var t=void 0;return this.length?(t=null!==this._values[this._tail]?this._values[this._tail]:null,this._values[this._tail]=null,this._tail=(this._tail+1)%this._values.length,this._length-=1):t=null,t}},unshift:{value:function(t){this._values[this._head]=t,this._head=(this._head+1)%this._values.length,this._length+=1}},resizingUnshift:{value:function(t){this.length+1===this._values.length&&this.resize(),this.unshift(t)}},resize:{value:function(){var n=new Array(2*this._values.length);this._tail<this._head?(t(this._values,this._tail,n,0,this._head),this._tail=0,this._head=this.length,this._values=n):this._head<this._tail?(t(this._values,0,n,this._values.length-this._tail,this._head),this._tail=0,this._head=this.length,this._values=n):(this._tail=0,this._head=0,this._values=n)}},cleanup:{value:function(t){for(var n=0,e=this.length;e>n;n+=1){var r=this.pop();t(r)&&unshift(r)}}},length:{get:function(){return this._length}}}),n}(),o=function(){function t(n){i(this,t),this._buf=new u(n),this._size=n}return r(t,{remove:{value:function(){return this._buf.pop()}},add:{value:function(t){this._buf.resizingUnshift(t)}},length:{get:function(){return this._buf.length}},full:{get:function(){return this._buf.length===this._size}}}),t}(),a=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length<this._size&&this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o),s=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length===this._size&&this.remove(),this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o);return n.DroppingBuffer=a,n.SlidingBuffer=s,n.FixedBuffer=o,n.RingBuffer=u,n}),angular.module("channels").service("asyncChannels",["asyncBuffers","asyncDispatch","asyncPromise",function(t,n,e){var r={},i=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},o=t.FixedBuffer,a=t.RingBuffer,s=n.Dispatch,c=e.Promise,f=function(){function t(n){u(this,t),this.offered=n,this.received=null,this.resolved=!1,this.active=!0,this.callbacks=[]}return i(t,{commit:{value:function(){var t=this;return function(n){if(t.resolved)throw new Error("Tried to resolve transactor twice!");return t.received=n,t.resolved=!0,t.callbacks.forEach(function(t){return t(n)}),t.offered}}},deref:{value:function(t){this.resolved?t(this.received):this.callbacks.push(t)}}}),t}(),h=new s,l=function(t,n){try{return t()}catch(e){return n(e)}},v=function(t){return function(n){return t.add(n)}},p=function(t){return console.error(t),!1},_={},d=function(){function t(n,e,r){u(this,t),this._buffer=n instanceof o?n:new o(n||0),this._takers=new a(32),this._putters=new a(32),this._xformer=e?e(this._buffer):v(this._buffer),this._exHandler=r||p,this._isOpen=!0}return i(t,{abort:{value:function(){for(;this._putters.length;){var t=this._putters.pop();t.active&&!function(){var n=t.commit();h.run(function(){return n(!0)})}()}}},fill:{value:function(t){var n=this,e=void 0===arguments[1]?new f(t):arguments[1];return function(){if(null===t)throw new Error("Cannot put null to a channel.");if(!(e instanceof f))throw new Error("Expecting Transactor to be passed to fill");if(!e.active)return e;if(n.open||e.commit()(!1),!n._buffer.full){e.commit()(!0);for(var r=l(function(){return n._xformer(t)===_},n._exHandler);n._takers.length&&n._buffer.length;){var i=n._takers.pop();i.active&&!function(){var t=n._buffer.remove(),e=i.commit();h.run(function(){return e(t)})}()}return r&&(n.abort(),n._puts.cleanup(function(){return!1})),e}if(n._takers.length){for(var i=n._takers.pop();n._takers.length&&!i.active;)i=n._takers.pop();i&&i.active?!function(){e.commit()(!0);var n=i.commit();h.run(function(){return n(t)})}():n._putters.resizingUnshift(e)}else n._putters.resizingUnshift(e);return e}()}},put:{value:function(t,n){var e=this;return new c(function(r){e.fill(t,n).deref(r)})}},drain:{value:function(){var t=this,n=void 0===arguments[0]?new f:arguments[0];if(!(n instanceof f))throw new Error("Expecting Transactor to be passed to drain");if(!n.active)return n;if(this._buffer.length){for(var e=this._buffer.remove();!this._buffer.full&&this._putters.length;){var r=this.putters.pop();r.active&&!function(){var n=r.commit();h.run(function(){return t._buffer.add(n())})}()}n.commit()(e)}else if(this._putters.length){for(var i=this._putters.pop();this._putters.length&&!i.active;)i=this._putters.pop();i&&i.active?!function(){var t=n.commit(),e=i.commit();h.run(function(){return t(e())})}():this._takers.resizingUnshift(n)}else this._takers.resizingUnshift(n);return n}},take:{value:function(t){var n=this;return new c(function(e){n.drain(t).deref(e)})}},then:{value:function(t,n){return this.take().then(t,n)}},close:{value:function(){for(this._isOpen=!1;this._takers.length;){var t=this._takers.pop();t.active&&t.commit()(null)}}},reduce:{value:function(t,n){function e(t){t===nil?r(u):(u="undefined"==typeof u?t:e(u,t),o.take().then(e))}var r,i,u=n,o=this,a=new c(function(t,n){r=t,i=n});return this.take().then(e),a}},filter:{value:function(n,e,r){var i=this,u=new t(r,function(t,r){!u.open&&e?i.close():null===t&&e?u.close():n(t)&&r(t)});return u}},into:{value:function n(t,e){function n(t){t===nil&&e?out.close():out.put(t).then(function(t){!t&&e?r.close():r.take().then(mapper)})}var r=this;return this.take().then(n),t}},open:{get:function(){return this._isOpen}}}),t}();return d.reduced=_,r.Channel=d,r.Transactor=f,r}]),angular.module("channels").service("asyncDispatch",function(){var t={},n=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),e=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},r="function"==typeof setImmediate?function(t){return setImmediate(t)}:function(t){return setTimeout(t)},i=function(){function t(n){e(this,t),this._asynchronizer=n||r,this._queue=[]}return n(t,{run:{value:function(t){var n=this;this._queue.push(t),this._asynchronizer(function(){for(;n._queue.length;)n._queue.shift()()})}}}),t}();return t.Dispatch=i,t}),angular.module("channels").service("asyncMult",["asyncPromise",function(t){function n(t,e){if(!t.length)return o.resolve();var i,u=function(){i=r(t);var u=i[0],o=i.slice(1);return{v:u.put(e).then(function(){return n(o,e)})}}();return"object"==typeof u?u.v:void 0}var e={},r=function(t){return Array.isArray(t)?t:Array.from(t)},i=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},o=t.Promise,a=function(){function t(e){u(this,t),this._taps=[],this._free=o.resolve(),e.take().then(function r(t){if(null!==t){var i=void 0,u=new o(function(t){return i=t});this._free=u,n(taps,t).then(function(){i(),e.take().then(r)})}}.bind(this))}return i(t,{tap:{value:function(t,n){var e=this;if(this._taps.some(function(n){return n.ch===t}))throw new Error("Can't add the same channel to a mult twice");return this._free.then(function(){return e._taps.push({close:n,ch:t}),t})}},untap:{value:function(t){var n=this;return this._free.then(function(){return n._taps=n._taps.filter(function(n){return n.ch!==t}),t})}}}),t}();return e.Mult=a,e}]),angular.module("channels").service("asyncUtils",["asyncChannels",function(t){function n(t){var n=[],e=new f;return t.map(function(t){if(Array.isArray(t)){var r;!function(){var i=new l(a,function(){n.forEach(function(t){return t.active=!1})});r=u(t,2);var o=r[0],a=r[1];o.put(a,i).then(function(){e.put([a,o])}),n.push(i)}()}else{var i=new l(!0,function(){n.forEach(function(t){return t.active=!1})});t.take(i).then(function(n){e.put([n,t])}),n.push(i)}}),e}function e(t){var n=new f;return setTimeout(function(){n.close()},t),n}function r(t,n){function e(){t.take().then(function(t){null===t?r.close():r.put(t).then(e)})}var r=new f(n);return e(),r}var i={},u=function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){for(var e,r=[],i=t[Symbol.iterator]();!(e=i.next()).done&&(r.push(e.value),!n||r.length!==n););return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")},o=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),a=function v(t,n,e){var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:v(i,n,e)}if("value"in r&&r.writable)return r.value;var u=r.get;return void 0===u?void 0:u.call(e)},s=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},c=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},f=t.Channel,h=t.Transactor,l=function(t){function n(t,e){c(this,n),a(Object.getPrototypeOf(n.prototype),"constructor",this).call(this,t),this.commitCb=e}return s(n,t),o(n,{commit:{value:function(){return this.commitCb(),a(Object.getPrototypeOf(n.prototype),"commit",this).call(this)}}}),n}(h);return i.alts=n,i.timeout=e,i.order=r,i}]),angular.module("channels").service("asyncPromise",["$q",function(t){var n={},e=function(n){return t(n)};return e.all=t.all,e.reject=t.reject,e.race=function(n){var e,r,i;return i=t(function(t,n){e=t,r=n}),n.forEach(function(t){return t.then(e,r)}),i},e.resolve=function(n){return t.when(n)},n.Promise=e,n}]);
//# sourceMappingURL=data:application/json;base64,