angular.module("channels",[]),angular.module("channels").service("chanBuffers",function(){function t(t,e,n,r,i){for(var u=0;i>u;u+=1)n[u+r]=t[u+e]}var e={},n=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},r=function(){function t(t,e){for(var n in e){var r=e[n];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,e)}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},u=function(){function e(t){i(this,e);var n="number"==typeof t?Math.max(1,t):1;this._tail=0,this._head=0,this._length=0,this._values=new Array(n)}return r(e,{pop:{value:function(){var t=void 0;return this.length?(t=null!==this._values[this._tail]?this._values[this._tail]:null,this._values[this._tail]=null,this._tail=(this._tail+1)%this._values.length,this._length-=1):t=null,t}},unshift:{value:function(t){this._values[this._head]=t,this._head=(this._head+1)%this._values.length,this._length+=1}},resizingUnshift:{value:function(t){this.length+1===this._values.length&&this.resize(),this.unshift(t)}},resize:{value:function(){var e=new Array(2*this._values.length);this._tail<this._head?(t(this._values,this._tail,e,0,this._head),this._tail=0,this._head=this.length,this._values=e):this._head<this._tail?(t(this._values,0,e,this._values.length-this._tail,this._head),this._tail=0,this._head=this.length,this._values=e):(this._tail=0,this._head=0,this._values=e)}},cleanup:{value:function(t){for(var e=0,n=this.length;n>e;e+=1){var r=this.pop();t(r)&&this.unshift(r)}}},length:{get:function(){return this._length}}}),e}(),o=function(){function t(e){i(this,t),this._buf=new u(e),this._size=e}return r(t,{remove:{value:function(){return this._buf.pop()}},add:{value:function(t){if(this.full)throw new Error("Cannot add to a full buffer.");return this._buf.resizingUnshift(t),this}},length:{get:function(){return this._buf.length}},full:{get:function(){return this._buf.length===this._size}}}),t}(),s=function(t){function e(){i(this,e),null!=t&&t.apply(this,arguments)}return n(e,t),r(e,{add:{value:function(t){return this._buf.length<this._size&&this._buf.unshift(t),this}},full:{get:function(){return!1}}}),e}(o),a=function(t){function e(){i(this,e),null!=t&&t.apply(this,arguments)}return n(e,t),r(e,{add:{value:function(t){return this._buf.length===this._size&&this.remove(),this._buf.unshift(t),this}},full:{get:function(){return!1}}}),e}(o);return e.DroppingBuffer=s,e.SlidingBuffer=a,e.FixedBuffer=o,e.RingBuffer=u,e}),angular.module("channels").service("chanChannels",["chanBuffers","chanDispatch","chanPromise","chanTransducers",function(t,e,n,r){var i={},u=function(){function t(t,e){for(var n in e){var r=e[n];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,e)}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s=t.FixedBuffer,a=t.RingBuffer,f=e.Dispatch,c=n.Promise,l=r.transducers,h=function(){function t(e){o(this,t),this.offered=e,this.received=null,this.resolved=!1,this.active=!0,this.callbacks=[]}return u(t,{commit:{value:function(){var t=this;return function(e){if(t.resolved)throw new Error("Tried to resolve transactor twice!");return t.received=e,t.resolved=!0,t.callbacks.forEach(function(t){return t(e)}),t.offered}}},deref:{value:function(t){this.resolved?t(this.received):this.callbacks.push(t)}}}),t}(),v=new f,_=function(){function t(e,n){o(this,t),!l&&n&&console.info("Using a transducer requires transducers-js <https://github.com/cognitect-labs/transducers-js>"),!e&&n&&l&&console.info("Transducers will be ignored for unbuffered channels.");var r=function(t,e){return t.add(e)};this._buffer=e instanceof s?e:new s(e||0),this._takers=new a(32),this._putters=new a(32),this._xformer=n&&l?n(l.wrap(r)):r,this._isOpen=!0}return u(t,{_insert:{value:function(t){return l?t?this._xformer.step(this._buffer,t):this._xformer.result(this._buffer):(t&&this._xformer(this._buffer,t),!1)}},fill:{value:function(t){var e=this,n=void 0===arguments[1]?new h(t):arguments[1];return function(){if(null===t)throw new Error("Cannot put null to a channel.");if(!(n instanceof h))throw new Error("Expecting Transactor to be passed to fill");if(!n.active)return n;if(e.open||n.commit()(!1),!e._buffer.full){n.commit()(!0);for(var r=l?l.reduced(e._insert(t)):e._insert(t);e._takers.length&&e._buffer.length;){var i=e._takers.pop();i.active&&!function(){var t=e._buffer.remove(),n=i.commit();v.run(function(){return n(t)})}()}return r&&e.close(),n}if(e._takers.length){for(var i=e._takers.pop();e._takers.length&&!i.active;)i=e._takers.pop();i&&i.active?!function(){n.commit()(!0);var e=i.commit();v.run(function(){return e(t)})}():e._putters.resizingUnshift(n)}else e._putters.resizingUnshift(n);return n}()}},put:{value:function(t,e){var n=this;return new c(function(r){n.fill(t,e).deref(r)})}},drain:{value:function(){var t=this,e=void 0===arguments[0]?new h:arguments[0];if(!(e instanceof h))throw new Error("Expecting Transactor to be passed to drain");if(!e.active)return e;if(this._buffer.length){for(var n=this._buffer.remove();!this._buffer.full&&this._putters.length;){var r=this._putters.pop();r.active&&!function(){var e=r.commit(),n=r.offered;v.run(function(){return e()}),t._insert(n)}()}e.commit()(n)}else if(this._putters.length){for(var r=this._putters.pop();this._putters.length&&!r.active;)r=this._putters.pop();if(r&&r.active)!function(){var t=e.commit(),n=r.commit(),i=r.offered;v.run(function(){return n()}),t(i)}();else if(this.open)this._takers.resizingUnshift(e);else{this._insert();var i=e.commit();i(this._buffer.length?this._buffer.remove():null)}}else this._takers.resizingUnshift(e);return e}},take:{value:function(t){var e=this;return new c(function(n){e.drain(t).deref(n)})}},then:{value:function(t,e){return this.take().then(t,e)}},close:{value:function(){var t=this;if(this.open)for(this._isOpen=!1,0===this._putters.length&&this._insert();this._takers.length;){var e=this._takers.pop();e.active&&!function(){var n=t._buffer.length?t._buffer.remove():null,r=e.commit();v.run(function(){return r(n)})}()}}},open:{get:function(){return this._isOpen}}}),t}();return i.Channel=_,i.Transactor=h,i}]),angular.module("channels").service("chanDispatch",function(){var t={},e=function(){function t(t,e){for(var n in e){var r=e[n];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,e)}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),n=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},r="function"==typeof setImmediate?function(t){return setImmediate(t)}:function(t){return setTimeout(t)},i=function(){function t(e){n(this,t),this._asynchronizer=e||r,this._queue=[]}return e(t,{run:{value:function(t){var e=this;this._queue.push(t),this._asynchronizer(function(){for(;e._queue.length;)e._queue.shift()()})}}}),t}();return t.Dispatch=i,t}),angular.module("channels").service("chanTransducers",function(){var t={},e=!1;if("undefined"!=typeof window&&window.transducers)e=window.transducers;else if("undefined"!=typeof global){var n=require;try{e=n("transducers-js")}catch(r){}}return t.transducers=e,t}),angular.module("channels").service("chanUtils",["chanChannels",function(t){function e(t){var e=new l,n=t.map(function(t){var r=void 0;if(Array.isArray(t)){var i;!function(){i=o(t,2);var u=i[0],s=i[1];r=new v(s,function(){n.forEach(function(t){return t.active=!1})}),u.fill(s,r).deref(function(){e.fill([s,u]).deref(function(){return e.close()})})}()}else r=new v(!0,function(){n.forEach(function(t){return t.active=!1})}),t.drain(r).deref(function(n){e.fill([n,t]).deref(function(){return e.close()})});return r});return e}function n(t){var e=new l;return setTimeout(function(){e.close()},t),e}function r(t,e,n){function r(u){null!==u?Promise.resolve(e(u)).then(function(e){n.put(e).then(function(e){e&&t.take().then(r)})}):i&&n.close()}var i=void 0===arguments[3]?!1:arguments[3];t.take().then(r)}function i(t,e){function n(){t.take().then(function(t){null===t?r.close():r.put(t).then(n)})}var r=new l(e);return n(),r}var u={},o=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){for(var n,r=[],i=t[Symbol.iterator]();!(n=i.next()).done&&(r.push(n.value),!e||r.length!==e););return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")},s=function(){function t(t,e){for(var n in e){var r=e[n];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,e)}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=function _(t,e,n){var r=Object.getOwnPropertyDescriptor(t,e);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:_(i,e,n)}if("value"in r&&r.writable)return r.value;var u=r.get;return void 0===u?void 0:u.call(n)},f=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.__proto__=e)},c=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},l=t.Channel,h=t.Transactor,v=function(t){function e(t,n){c(this,e),a(Object.getPrototypeOf(e.prototype),"constructor",this).call(this,t),this.commitCb=n}return f(e,t),s(e,{commit:{value:function(){return this.commitCb(),a(Object.getPrototypeOf(e.prototype),"commit",this).call(this)}}}),e}(h);return u.alts=e,u.timeout=n,u.pipelineAsync=r,u.order=i,u}]),angular.module("channels").service("chanPromise",["$q",function(t){var e={},n=function(e){return t(e)};return n.all=t.all,n.reject=t.reject,n.race=function(e){var n,r,i;return i=t(function(t,e){n=t,r=e}),e.forEach(function(t){return t.then(n,r)}),i},n.resolve=function(e){return t.when(e)},e.Promise=n,e}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiYnVmZmVycy5qcyIsImNoYW5uZWxzLmpzIiwiZGlzcGF0Y2guanMiLCJ0cmFuc2R1Y2Vycy5qcyIsInV0aWxzLmpzIiwicHJvbWlzZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwic2VydmljZSIsImFjb3B5Iiwic3JjIiwic3JjU3RhcnQiLCJkZXN0IiwiZGVzdFN0YXJ0IiwibGVuZ3RoIiwiaSIsIkVTNl9fRVhQT1JUUyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJfX3Byb3RvX18iLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJrZXkiLCJwcm9wIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlJpbmdCdWZmZXIiLCJzIiwidGhpcyIsInNpemUiLCJNYXRoIiwibWF4IiwiX3RhaWwiLCJfaGVhZCIsIl9sZW5ndGgiLCJfdmFsdWVzIiwiQXJyYXkiLCJwb3AiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJ1bnNoaWZ0IiwidmFsIiwicmVzaXppbmdVbnNoaWZ0IiwicmVzaXplIiwibmV3QXJyeSIsImNsZWFudXAiLCJrZWVwIiwibCIsIml0ZW0iLCJnZXQiLCJGaXhlZEJ1ZmZlciIsIm4iLCJfYnVmIiwiX3NpemUiLCJyZW1vdmUiLCJhZGQiLCJ2IiwiZnVsbCIsIkVycm9yIiwiRHJvcHBpbmdCdWZmZXIiLCJfRml4ZWRCdWZmZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsIlNsaWRpbmdCdWZmZXIiLCJfRml4ZWRCdWZmZXIyIiwiY2hhbkJ1ZmZlcnMiLCJjaGFuRGlzcGF0Y2giLCJjaGFuUHJvbWlzZSIsImNoYW5UcmFuc2R1Y2VycyIsIkRpc3BhdGNoIiwiUHJvbWlzZSIsInRyYW5zZHVjZXJzIiwiVHJhbnNhY3RvciIsIm9mZmVyIiwib2ZmZXJlZCIsInJlY2VpdmVkIiwicmVzb2x2ZWQiLCJhY3RpdmUiLCJjYWxsYmFja3MiLCJjb21taXQiLCJfdGhpcyIsImZvckVhY2giLCJjIiwiZGVyZWYiLCJjYWxsYmFjayIsInB1c2giLCJkaXNwYXRjaCIsIkNoYW5uZWwiLCJzaXplT3JCdWYiLCJ4Zm9ybSIsImNvbnNvbGUiLCJpbmZvIiwiZG9BZGQiLCJidWYiLCJfYnVmZmVyIiwiX3Rha2VycyIsIl9wdXR0ZXJzIiwiX3hmb3JtZXIiLCJ3cmFwIiwiX2lzT3BlbiIsIl9pbnNlcnQiLCJzdGVwIiwiZmlsbCIsInR4Iiwib3BlbiIsImRvbmUiLCJyZWR1Y2VkIiwidGFrZXJUeCIsInRha2VyQ2IiLCJydW4iLCJjbG9zZSIsInB1dCIsInRyYW5zYWN0b3IiLCJyZXNvbHZlIiwiZHJhaW4iLCJidWZWYWwiLCJwdXR0ZXIiLCJwdXRUeCIsInR4Q2IiLCJ0YWtlIiwidGhlbiIsImZuIiwiZXJyIiwidGFrZXIiLCJkZWZhdWx0QXN5bmNocm9uaXplciIsInNldEltbWVkaWF0ZSIsInNldFRpbWVvdXQiLCJhc3luY2hyb25pemVyIiwiX2FzeW5jaHJvbml6ZXIiLCJfcXVldWUiLCJzaGlmdCIsIl90cmFuc2R1Y2VycyIsIndpbmRvdyIsImdsb2JhbCIsInIiLCJyZXF1aXJlIiwiZSIsImNoYW5DaGFubmVscyIsImFsdHMiLCJyYWNlIiwib3V0Q2giLCJ0cmFuc2FjdG9ycyIsIm1hcCIsImNtZCIsImlzQXJyYXkiLCJfY21kIiwiX3NsaWNlZFRvQXJyYXkiLCJjaCIsIkFsdHNUcmFuc2FjdG9yIiwiaCIsInRpbWVvdXQiLCJtcyIsInBpcGVsaW5lQXN5bmMiLCJpbmNoIiwiY29udmVydGVyIiwib3V0Y2giLCJjb252ZXJ0ZWQiLCJkaWRQdXQiLCJzaG91bGRDbG9zZURvd25zdHJlYW0iLCJvcmRlciIsImFyciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3N0ZXAiLCJfYXJyIiwiX2l0ZXJhdG9yIiwibmV4dCIsIl9nZXQiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInBhcmVudCIsImdldFByb3RvdHlwZU9mIiwiZ2V0dGVyIiwiY2FsbCIsIl9UcmFuc2FjdG9yIiwiY29tbWl0Q2IiLCIkcSIsIlByb20iLCJhbGwiLCJyZWplY3QiLCJwcm9tcyIsImRvRnVsZmlsbCIsImRvUmVqZWN0IiwicHJvbSIsImZ1bGZpbGwiLCJwIiwid2hlbiJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQVFDLE9BQU8sZUNEZkQsUUFBUUMsT0FBTyxZQUFZQyxRQUFRLGNBQWUsV0FJbEQsUUFBU0MsR0FBTUMsRUFBS0MsRUFBVUMsRUFBTUMsRUFBV0MsR0FDN0MsSUFBSSxHQUFJQyxHQUFJLEVBQU9ELEVBQUpDLEVBQVlBLEdBQUssRUFDOUJILEVBQUtHLEVBQUlGLEdBQWFILEVBQUlLLEVBQUlKLEdBTGhDLEdBQUlLLE1BRUFDLEVBQVksU0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJQyxXQUFVLGlFQUFvRUQsR0FBZUQsR0FBU0csVUFBWUMsT0FBT0MsT0FBT0osR0FBY0EsRUFBV0UsV0FBYUcsYUFBZUMsTUFBT1AsRUFBVVEsWUFBWSxFQUFPQyxVQUFVLEVBQU1DLGNBQWMsS0FBZVQsSUFBWUQsRUFBU1csVUFBWVYsSUFFOVpXLEVBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUlDLEtBQU9ELEdBQU8sQ0FBRSxHQUFJRSxHQUFPRixFQUFNQyxFQUFNQyxHQUFLUCxjQUFlLEVBQVVPLEVBQUtWLFFBQU9VLEVBQUtSLFVBQVcsR0FBUUwsT0FBT1MsaUJBQWlCQyxFQUFRQyxHQUFVLE1BQU8sVUFBVUcsRUFBYUMsRUFBWUMsR0FBaUosTUFBOUhELElBQVlOLEVBQWlCSyxFQUFZ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LElBSWZ4QyxFQUFhcUUsUUFBVThHLEVBQ2hCbkwiLCJmaWxlIjoianMtY2hhbm5lbHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgYW5ndWxhcjp0cnVlICovXG5hbmd1bGFyLm1vZHVsZSgnY2hhbm5lbHMnLCBbXSk7IiwiXG4vL1xuLy8gVE9ETzogdGhpcyBpc24ndCBpZGlvbWF0aWNhbGx5IGphdmFzY3JpcHQgKGNvdWxkIHByb2JhYmx5IHVzZSBzbGljZS9zcGxpY2UgdG8gZ29vZCBlZmZlY3QpXG4vL1xuZnVuY3Rpb24gYWNvcHkoc3JjLCBzcmNTdGFydCwgZGVzdCwgZGVzdFN0YXJ0LCBsZW5ndGgpIHtcbiAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgZGVzdFtpICsgZGVzdFN0YXJ0XSA9IHNyY1tpICsgc3JjU3RhcnRdO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNsYXNzIFJpbmdCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgbGV0IHNpemUgPSAodHlwZW9mIHMgPT09ICdudW1iZXInKSA/IE1hdGgubWF4KDEsIHMpIDogMTtcbiAgICB0aGlzLl90YWlsICAgPSAwO1xuICAgIHRoaXMuX2hlYWQgICA9IDA7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIH1cblxuICBwb3AoKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZih0aGlzLmxlbmd0aCkge1xuICAgICAgLy8gR2V0IHRoZSBpdGVtIG91dCBvZiB0aGUgc2V0IG9mIHZhbHVlc1xuICAgICAgcmVzdWx0ID0gKHRoaXMuX3ZhbHVlc1t0aGlzLl90YWlsXSAhPT0gbnVsbCkgPyB0aGlzLl92YWx1ZXNbdGhpcy5fdGFpbF0gOiBudWxsO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0IG9mIHZhbHVlcywgdXBkYXRlIGluZGljaWVzXG4gICAgICB0aGlzLl92YWx1ZXNbdGhpcy5fdGFpbF0gPSBudWxsO1xuICAgICAgdGhpcy5fdGFpbCA9ICh0aGlzLl90YWlsICsgMSkgJSB0aGlzLl92YWx1ZXMubGVuZ3RoO1xuICAgICAgdGhpcy5fbGVuZ3RoIC09IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB1bnNoaWZ0KHZhbCkge1xuICAgIHRoaXMuX3ZhbHVlc1t0aGlzLl9oZWFkXSA9IHZhbDtcbiAgICB0aGlzLl9oZWFkID0gKHRoaXMuX2hlYWQgKyAxKSAlIHRoaXMuX3ZhbHVlcy5sZW5ndGg7XG4gICAgdGhpcy5fbGVuZ3RoICs9IDE7XG4gIH1cblxuICByZXNpemluZ1Vuc2hpZnQodmFsKSB7XG4gICAgaWYodGhpcy5sZW5ndGggKyAxID09PSB0aGlzLl92YWx1ZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH1cbiAgICB0aGlzLnVuc2hpZnQodmFsKTtcbiAgfVxuXG4gIHJlc2l6ZSgpIHtcbiAgICBsZXQgbmV3QXJyeSA9IG5ldyBBcnJheSh0aGlzLl92YWx1ZXMubGVuZ3RoICogMik7XG5cbiAgICBpZih0aGlzLl90YWlsIDwgdGhpcy5faGVhZCkge1xuICAgICAgYWNvcHkodGhpcy5fdmFsdWVzLCB0aGlzLl90YWlsLCBuZXdBcnJ5LCAwLCB0aGlzLl9oZWFkKTtcblxuICAgICAgdGhpcy5fdGFpbCA9IDA7XG4gICAgICB0aGlzLl9oZWFkID0gdGhpcy5sZW5ndGg7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdBcnJ5O1xuXG4gICAgfSBlbHNlIGlmKHRoaXMuX2hlYWQgPCB0aGlzLl90YWlsKSB7XG4gICAgICBhY29weSh0aGlzLl92YWx1ZXMsIDAsIG5ld0FycnksIHRoaXMuX3ZhbHVlcy5sZW5ndGggLSB0aGlzLl90YWlsLCB0aGlzLl9oZWFkKTtcblxuICAgICAgdGhpcy5fdGFpbCA9IDA7XG4gICAgICB0aGlzLl9oZWFkID0gdGhpcy5sZW5ndGg7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdBcnJ5O1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RhaWwgPSAwO1xuICAgICAgdGhpcy5faGVhZCA9IDA7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdBcnJ5O1xuICAgIH1cbiAgfVxuXG4gIGNsZWFudXAoa2VlcCkge1xuICAgIGZvcihsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgbGV0IGl0ZW0gPSB0aGlzLnBvcCgpO1xuXG4gICAgICBpZihrZWVwKGl0ZW0pKSB7XG4gICAgICAgIHRoaXMudW5zaGlmdChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgRml4ZWRCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihuKSB7XG4gICAgdGhpcy5fYnVmID0gbmV3IFJpbmdCdWZmZXIobik7XG4gICAgdGhpcy5fc2l6ZSA9IG47XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1Zi5wb3AoKTtcbiAgfVxuXG4gIGFkZCh2KSB7XG4gICAgaWYodGhpcy5mdWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIHRvIGEgZnVsbCBidWZmZXIuXCIpO1xuICAgIH1cbiAgICB0aGlzLl9idWYucmVzaXppbmdVbnNoaWZ0KHYpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9idWYubGVuZ3RoO1xuICB9XG5cbiAgZ2V0IGZ1bGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1Zi5sZW5ndGggPT09IHRoaXMuX3NpemU7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgRHJvcHBpbmdCdWZmZXIgZXh0ZW5kcyBGaXhlZEJ1ZmZlciB7XG4gIGFkZCh2KSB7XG4gICAgaWYodGhpcy5fYnVmLmxlbmd0aCA8IHRoaXMuX3NpemUpIHtcbiAgICAgIHRoaXMuX2J1Zi51bnNoaWZ0KHYpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0IGZ1bGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNsYXNzIFNsaWRpbmdCdWZmZXIgZXh0ZW5kcyBGaXhlZEJ1ZmZlciB7XG4gIGFkZCh2KSB7XG4gICAgaWYodGhpcy5fYnVmLmxlbmd0aCA9PT0gdGhpcy5fc2l6ZSkge1xuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy5fYnVmLnVuc2hpZnQodik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldCBmdWxsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgeyBEcm9wcGluZ0J1ZmZlciwgU2xpZGluZ0J1ZmZlciwgRml4ZWRCdWZmZXIsIFJpbmdCdWZmZXIgfTsiLCJcbmltcG9ydCB7IEZpeGVkQnVmZmVyLCBSaW5nQnVmZmVyIH0gZnJvbSBcIi4vYnVmZmVycy5qc1wiO1xuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuaW1wb3J0IHsgUHJvbWlzZSB9IGZyb20gXCIuL3Byb21pc2UuanNcIjtcbmltcG9ydCB7IHRyYW5zZHVjZXJzIH0gZnJvbSBcIi4vdHJhbnNkdWNlcnMuanNcIjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgVHJhbnNhY3RvciB7XG4gIGNvbnN0cnVjdG9yKG9mZmVyKSB7XG4gICAgdGhpcy5vZmZlcmVkID0gb2ZmZXI7XG4gICAgdGhpcy5yZWNlaXZlZCA9IG51bGw7XG4gICAgdGhpcy5yZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICB9XG5cbiAgY29tbWl0KCkge1xuICAgIHJldHVybiAodmFsKSA9PiB7XG4gICAgICBpZih0aGlzLnJlc29sdmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyaWVkIHRvIHJlc29sdmUgdHJhbnNhY3RvciB0d2ljZSFcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnJlY2VpdmVkID0gdmFsO1xuICAgICAgdGhpcy5yZXNvbHZlZCA9IHRydWU7XG4gICAgICB0aGlzLmNhbGxiYWNrcy5mb3JFYWNoKGMgPT4gYyh2YWwpKTtcblxuICAgICAgcmV0dXJuIHRoaXMub2ZmZXJlZDtcbiAgICB9O1xuICB9XG5cbiAgZGVyZWYoY2FsbGJhY2spIHtcbiAgICBpZih0aGlzLnJlc29sdmVkKSB7XG4gICAgICBjYWxsYmFjayh0aGlzLnJlY2VpdmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubGV0IGRpc3BhdGNoID0gbmV3IERpc3BhdGNoKCk7XG5cbmNsYXNzIENoYW5uZWwge1xuICBjb25zdHJ1Y3RvcihzaXplT3JCdWYsIHhmb3JtKSB7XG4gICAgaWYoIXRyYW5zZHVjZXJzICYmIHhmb3JtKSB7XG4gICAgICBjb25zb2xlLmluZm8oXCJVc2luZyBhIHRyYW5zZHVjZXIgcmVxdWlyZXMgdHJhbnNkdWNlcnMtanMgPGh0dHBzOi8vZ2l0aHViLmNvbS9jb2duaXRlY3QtbGFicy90cmFuc2R1Y2Vycy1qcz5cIik7XG4gICAgfVxuICAgIGlmKCFzaXplT3JCdWYgJiYgeGZvcm0gJiYgdHJhbnNkdWNlcnMpIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcIlRyYW5zZHVjZXJzIHdpbGwgYmUgaWdub3JlZCBmb3IgdW5idWZmZXJlZCBjaGFubmVscy5cIik7XG4gICAgfVxuXG4gICAgLy8gQWRkcyB2YWx1ZSB0byB0aGUgYnVmZmVyOlxuICAgIC8vIGRvQWRkKCkgPT4gQnVmZmVyXG4gICAgLy8gZG9BZGQodmFsKSA9PiBCdWZmZXJcbiAgICBsZXQgZG9BZGQgPSAoYnVmLCB2YWwpID0+IGJ1Zi5hZGQodmFsKTtcblxuICAgIHRoaXMuX2J1ZmZlciAgICA9IChzaXplT3JCdWYgaW5zdGFuY2VvZiBGaXhlZEJ1ZmZlcikgPyBzaXplT3JCdWYgOiBuZXcgRml4ZWRCdWZmZXIoc2l6ZU9yQnVmIHx8IDApO1xuICAgIHRoaXMuX3Rha2VycyAgICA9IG5ldyBSaW5nQnVmZmVyKDMyKTtcbiAgICB0aGlzLl9wdXR0ZXJzICAgPSBuZXcgUmluZ0J1ZmZlcigzMik7XG4gICAgdGhpcy5feGZvcm1lciAgID0geGZvcm0gJiYgdHJhbnNkdWNlcnMgPyB4Zm9ybSh0cmFuc2R1Y2Vycy53cmFwKGRvQWRkKSkgOiBkb0FkZDtcblxuICAgIHRoaXMuX2lzT3BlbiA9IHRydWU7XG4gIH1cblxuICBfaW5zZXJ0KHZhbCkge1xuICAgIGlmKHRyYW5zZHVjZXJzKSB7XG4gICAgICBpZih2YWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3hmb3JtZXIuc3RlcCh0aGlzLl9idWZmZXIsIHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5feGZvcm1lci5yZXN1bHQodGhpcy5fYnVmZmVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYodmFsKSB7XG4gICAgICB0aGlzLl94Zm9ybWVyKHRoaXMuX2J1ZmZlciwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZmlsbCh2YWwsIHR4ID0gbmV3IFRyYW5zYWN0b3IodmFsKSkge1xuICAgIGlmKHZhbCA9PT0gbnVsbCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcHV0IG51bGwgdG8gYSBjaGFubmVsLlwiKTsgfVxuICAgIGlmKCEodHggaW5zdGFuY2VvZiBUcmFuc2FjdG9yKSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RpbmcgVHJhbnNhY3RvciB0byBiZSBwYXNzZWQgdG8gZmlsbFwiKTsgfVxuICAgIGlmKCF0eC5hY3RpdmUpIHsgcmV0dXJuIHR4OyB9XG5cbiAgICBpZighdGhpcy5vcGVuKSB7XG4gICAgICAvLyBFaXRoZXIgc29tZWJvZHkgaGFzIHJlc29sdmVkIHRoZSBoYW5kbGVyIGFscmVhZHkgKHRoYXQgd2FzIGZhc3QpIG9yIHRoZSBjaGFubmVsIGlzIGNsb3NlZC5cbiAgICAgIC8vIGNvcmUuYXN5bmMgcmV0dXJucyBhIGJvb2xlYW4gb2Ygd2hldGhlciBvciBub3Qgc29tZXRoaW5nICpjb3VsZCogZ2V0IHB1dCB0byB0aGUgY2hhbm5lbFxuICAgICAgLy8gd2UnbGwgZG8gdGhlIHNhbWUgI2NhcmdvY3VsdFxuICAgICAgdHguY29tbWl0KCkoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmKCF0aGlzLl9idWZmZXIuZnVsbCkge1xuICAgICAgLy8gVGhlIGNoYW5uZWwgaGFzIHNvbWUgZnJlZSBzcGFjZS4gU3RpY2sgaXQgaW4gdGhlIGJ1ZmZlciBhbmQgdGhlbiBkcmFpbiBhbnkgd2FpdGluZyB0YWtlcy5cbiAgICAgIHR4LmNvbW1pdCgpKHRydWUpO1xuXG4gICAgICBsZXQgZG9uZSA9IHRyYW5zZHVjZXJzID8gdHJhbnNkdWNlcnMucmVkdWNlZCh0aGlzLl9pbnNlcnQodmFsKSkgOiB0aGlzLl9pbnNlcnQodmFsKTtcblxuICAgICAgd2hpbGUodGhpcy5fdGFrZXJzLmxlbmd0aCAmJiB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGxldCB0YWtlclR4ID0gdGhpcy5fdGFrZXJzLnBvcCgpO1xuXG4gICAgICAgIGlmKHRha2VyVHguYWN0aXZlKSB7XG4gICAgICAgICAgbGV0IHYgPSB0aGlzLl9idWZmZXIucmVtb3ZlKCk7XG4gICAgICAgICAgbGV0IHRha2VyQ2IgPSB0YWtlclR4LmNvbW1pdCgpO1xuXG4gICAgICAgICAgZGlzcGF0Y2gucnVuKCgpID0+IHRha2VyQ2IodikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZihkb25lKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR4O1xuICAgIH0gZWxzZSBpZih0aGlzLl90YWtlcnMubGVuZ3RoKSB7XG4gICAgICAvLyBUaGUgYnVmZmVyIGlzIGZ1bGwgYnV0IHRoZXJlIGFyZSB3YWl0aW5nIHRha2VycyAoZS5nLiB0aGUgYnVmZmVyIGlzIHNpemUgemVybylcblxuICAgICAgbGV0IHRha2VyVHggPSB0aGlzLl90YWtlcnMucG9wKCk7XG5cbiAgICAgIHdoaWxlKHRoaXMuX3Rha2Vycy5sZW5ndGggJiYgIXRha2VyVHguYWN0aXZlKSB7XG4gICAgICAgIHRha2VyVHggPSB0aGlzLl90YWtlcnMucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmKHRha2VyVHggJiYgdGFrZXJUeC5hY3RpdmUpIHtcbiAgICAgICAgdHguY29tbWl0KCkodHJ1ZSk7XG4gICAgICAgIGxldCB0YWtlckNiID0gdGFrZXJUeC5jb21taXQoKTtcblxuICAgICAgICBkaXNwYXRjaC5ydW4oKCkgPT4gdGFrZXJDYih2YWwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3B1dHRlcnMucmVzaXppbmdVbnNoaWZ0KHR4KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHV0dGVycy5yZXNpemluZ1Vuc2hpZnQodHgpO1xuICAgIH1cblxuICAgIHJldHVybiB0eDtcbiAgfVxuXG4gIHB1dCh2YWwsIHRyYW5zYWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICB0aGlzLmZpbGwodmFsLCB0cmFuc2FjdG9yKS5kZXJlZihyZXNvbHZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRyYWluKHR4ID0gbmV3IFRyYW5zYWN0b3IoKSkge1xuICAgIGlmKCEodHggaW5zdGFuY2VvZiBUcmFuc2FjdG9yKSkgeyB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RpbmcgVHJhbnNhY3RvciB0byBiZSBwYXNzZWQgdG8gZHJhaW5cIik7IH1cbiAgICBpZighdHguYWN0aXZlKSB7IHJldHVybiB0eDsgfVxuXG4gICAgaWYodGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgbGV0IGJ1ZlZhbCA9IHRoaXMuX2J1ZmZlci5yZW1vdmUoKTtcblxuICAgICAgd2hpbGUoIXRoaXMuX2J1ZmZlci5mdWxsICYmIHRoaXMuX3B1dHRlcnMubGVuZ3RoKSB7XG4gICAgICAgIGxldCBwdXR0ZXIgPSB0aGlzLl9wdXR0ZXJzLnBvcCgpO1xuXG4gICAgICAgIGlmKHB1dHRlci5hY3RpdmUpIHtcbiAgICAgICAgICBsZXQgcHV0VHggPSBwdXR0ZXIuY29tbWl0KCksXG4gICAgICAgICAgICAgIHZhbCA9IHB1dHRlci5vZmZlcmVkOyAvLyBLaW5kYSBicmVha2luZyB0aGUgcnVsZXMgaGVyZVxuXG4gICAgICAgICAgZGlzcGF0Y2gucnVuKCgpID0+IHB1dFR4KCkpO1xuICAgICAgICAgIHRoaXMuX2luc2VydCh2YWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHR4LmNvbW1pdCgpKGJ1ZlZhbCk7XG4gICAgfSBlbHNlIGlmKHRoaXMuX3B1dHRlcnMubGVuZ3RoKSB7XG4gICAgICBsZXQgcHV0dGVyID0gdGhpcy5fcHV0dGVycy5wb3AoKTtcblxuICAgICAgd2hpbGUodGhpcy5fcHV0dGVycy5sZW5ndGggJiYgIXB1dHRlci5hY3RpdmUpIHtcbiAgICAgICAgcHV0dGVyID0gdGhpcy5fcHV0dGVycy5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgaWYocHV0dGVyICYmIHB1dHRlci5hY3RpdmUpIHtcbiAgICAgICAgbGV0IHR4Q2IgPSB0eC5jb21taXQoKSxcbiAgICAgICAgICAgIHB1dFR4ID0gcHV0dGVyLmNvbW1pdCgpLFxuICAgICAgICAgICAgdmFsID0gcHV0dGVyLm9mZmVyZWQ7XG5cbiAgICAgICAgZGlzcGF0Y2gucnVuKCgpID0+IHB1dFR4KCkpO1xuICAgICAgICB0eENiKHZhbCk7XG4gICAgICB9IGVsc2UgaWYoIXRoaXMub3Blbikge1xuICAgICAgICB0aGlzLl9pbnNlcnQoKTtcblxuICAgICAgICBsZXQgdHhDYiA9IHR4LmNvbW1pdCgpO1xuXG4gICAgICAgIGlmKHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICB0eENiKHRoaXMuX2J1ZmZlci5yZW1vdmUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHhDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdGFrZXJzLnJlc2l6aW5nVW5zaGlmdCh0eCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Rha2Vycy5yZXNpemluZ1Vuc2hpZnQodHgpO1xuICAgIH1cblxuICAgIHJldHVybiB0eDtcbiAgfVxuXG4gIHRha2UodHJhbnNhY3Rvcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHRoaXMuZHJhaW4odHJhbnNhY3RvcikuZGVyZWYocmVzb2x2ZSk7XG4gICAgfSk7XG4gIH1cblxuICB0aGVuKGZuLCBlcnIpIHtcbiAgICByZXR1cm4gdGhpcy50YWtlKCkudGhlbihmbiwgZXJyKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIGlmKHRoaXMub3Blbikge1xuICAgICAgdGhpcy5faXNPcGVuID0gZmFsc2U7XG5cbiAgICAgIGlmKHRoaXMuX3B1dHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2luc2VydCgpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodGhpcy5fdGFrZXJzLmxlbmd0aCkge1xuICAgICAgICBsZXQgdGFrZXIgPSB0aGlzLl90YWtlcnMucG9wKCk7XG5cbiAgICAgICAgaWYodGFrZXIuYWN0aXZlKSB7XG4gICAgICAgICAgbGV0IHZhbCA9IHRoaXMuX2J1ZmZlci5sZW5ndGggPyB0aGlzLl9idWZmZXIucmVtb3ZlKCkgOiBudWxsLFxuICAgICAgICAgICAgICB0YWtlckNiID0gdGFrZXIuY29tbWl0KCk7XG5cbiAgICAgICAgICBkaXNwYXRjaC5ydW4oKCkgPT4gdGFrZXJDYih2YWwpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBvcGVuKCkge1xuICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2hhbm5lbCwgVHJhbnNhY3RvciB9OyIsIlxuLyogZ2xvYmFsIHNldEltbWVkaWF0ZTp0cnVlICovXG5sZXQgZGVmYXVsdEFzeW5jaHJvbml6ZXIgPSAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykgPyBmdW5jdGlvbihmbikge1xuICByZXR1cm4gc2V0SW1tZWRpYXRlKGZuKTtcbn0gOiBmdW5jdGlvbihmbikge1xuICByZXR1cm4gc2V0VGltZW91dChmbik7XG59O1xuXG5jbGFzcyBEaXNwYXRjaCB7XG4gIGNvbnN0cnVjdG9yKGFzeW5jaHJvbml6ZXIpIHtcbiAgICB0aGlzLl9hc3luY2hyb25pemVyID0gYXN5bmNocm9uaXplciB8fCBkZWZhdWx0QXN5bmNocm9uaXplcjtcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICB9XG5cbiAgcnVuKGZuKSB7XG4gICAgdGhpcy5fcXVldWUucHVzaChmbik7XG5cbiAgICB0aGlzLl9hc3luY2hyb25pemVyKCgpID0+IHtcbiAgICAgIHdoaWxlKHRoaXMuX3F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiUVVFVUVcIiwgdGhpcy5fcXVldWVbMF0pO1xuICAgICAgICB0aGlzLl9xdWV1ZS5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuXG5leHBvcnQgeyBEaXNwYXRjaCB9OyIsInZhciBfdHJhbnNkdWNlcnMgPSBmYWxzZTtcblxuLyogZ2xvYmFsIHJlcXVpcmU6dHJ1ZSAqL1xuaWYodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRyYW5zZHVjZXJzKSB7XG4gIF90cmFuc2R1Y2VycyA9IHdpbmRvdy50cmFuc2R1Y2Vycztcbn0gZWxzZSBpZih0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBsZXQgciA9IHJlcXVpcmU7IC8vIFRyaWNrIGJyb3dzZXJpZnlcbiAgdHJ5IHtcbiAgICBfdHJhbnNkdWNlcnMgPSByKCd0cmFuc2R1Y2Vycy1qcycpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG5leHBvcnQgeyBfdHJhbnNkdWNlcnMgYXMgdHJhbnNkdWNlcnMgfTtcbiIsImltcG9ydCB7IENoYW5uZWwsIFRyYW5zYWN0b3IgfSBmcm9tIFwiLi9jaGFubmVscy5qc1wiO1xuXG5cbmNsYXNzIEFsdHNUcmFuc2FjdG9yIGV4dGVuZHMgVHJhbnNhY3RvciB7XG4gIGNvbnN0cnVjdG9yKG9mZmVyLCBjb21taXRDYikge1xuICAgIHN1cGVyKG9mZmVyKTtcbiAgICB0aGlzLmNvbW1pdENiID0gY29tbWl0Q2I7XG4gIH1cbiAgY29tbWl0KCkge1xuICAgIHRoaXMuY29tbWl0Q2IoKTtcbiAgICByZXR1cm4gc3VwZXIuY29tbWl0KCk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gYWx0cyhyYWNlKSB7XG4gIGxldCBvdXRDaCA9IG5ldyBDaGFubmVsKCk7XG5cbiAgbGV0IHRyYW5zYWN0b3JzID0gcmFjZS5tYXAoY21kID0+IHtcbiAgICBsZXQgdHg7XG5cbiAgICBpZihBcnJheS5pc0FycmF5KGNtZCkpIHtcbiAgICAgIGxldCBbIGNoLCB2YWwgXSA9IGNtZDtcblxuICAgICAgdHggPSBuZXcgQWx0c1RyYW5zYWN0b3IodmFsLCAoKSA9PiB7XG4gICAgICAgIHRyYW5zYWN0b3JzLmZvckVhY2goaCA9PiBoLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgICBjaC5maWxsKHZhbCwgdHgpLmRlcmVmKGZ1bmN0aW9uKCkge1xuICAgICAgICBvdXRDaC5maWxsKFsgdmFsLCBjaCBdKS5kZXJlZigoKSA9PiBvdXRDaC5jbG9zZSgpKTtcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgdHggPSBuZXcgQWx0c1RyYW5zYWN0b3IodHJ1ZSwgKCkgPT4ge1xuICAgICAgICB0cmFuc2FjdG9ycy5mb3JFYWNoKGggPT4gaC5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgY21kLmRyYWluKHR4KS5kZXJlZihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgb3V0Q2guZmlsbChbIHZhbCwgY21kIF0pLmRlcmVmKCgpID0+IG91dENoLmNsb3NlKCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR4O1xuICB9KTtcblxuICByZXR1cm4gb3V0Q2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0KG1zKSB7XG4gIHZhciBjaCA9IG5ldyBDaGFubmVsKCk7XG4gIHNldFRpbWVvdXQoKCkgPT4geyBjaC5jbG9zZSgpOyB9LCBtcyk7XG4gIHJldHVybiBjaDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVsaW5lQXN5bmMoaW5jaCwgY29udmVydGVyLCBvdXRjaCwgc2hvdWxkQ2xvc2VEb3duc3RyZWFtID0gZmFsc2UpIHtcbiAgZnVuY3Rpb24gdGFrZSh2YWwpIHtcbiAgICBpZih2YWwgIT09IG51bGwpIHtcbiAgICAgIFByb21pc2UucmVzb2x2ZShjb252ZXJ0ZXIodmFsKSkudGhlbihmdW5jdGlvbihjb252ZXJ0ZWQpIHtcbiAgICAgICAgb3V0Y2gucHV0KGNvbnZlcnRlZCkudGhlbihmdW5jdGlvbihkaWRQdXQpIHtcbiAgICAgICAgICBpZihkaWRQdXQpIHtcbiAgICAgICAgICAgIGluY2gudGFrZSgpLnRoZW4odGFrZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZihzaG91bGRDbG9zZURvd25zdHJlYW0pIHtcbiAgICAgIG91dGNoLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgaW5jaC50YWtlKCkudGhlbih0YWtlKTtcbn1cblxuLy8gRW5mb3JjZXMgb3JkZXIgcmVzb2x1dGlvbiBvbiByZXN1bHRpbmcgY2hhbm5lbFxuLy8gVGhpcyBtaWdodCBuZWVkIHRvIGJlIHRoZSBkZWZhdWx0IGJlaGF2aW9yLCB0aG91Z2ggdGhhdCByZXF1aXJlcyBtb3JlIHRob3VnaHRcbmV4cG9ydCBmdW5jdGlvbiBvcmRlcihpbmNoLCBzaXplT3JCdWYpIHtcbiAgdmFyIG91dGNoID0gbmV3IENoYW5uZWwoc2l6ZU9yQnVmKTtcblxuICBmdW5jdGlvbiBkcmFpbigpIHtcbiAgICBpbmNoLnRha2UoKS50aGVuKHZhbCA9PiB7XG4gICAgICBpZih2YWwgPT09IG51bGwpIHtcbiAgICAgICAgb3V0Y2guY2xvc2UoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dGNoLnB1dCh2YWwpLnRoZW4oZHJhaW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGRyYWluKCk7XG5cbiAgcmV0dXJuIG91dGNoO1xufVxuIiwiXG5pbXBvcnQgKiBhcyAkcSBmcm9tIFwiJHFcIjtcblxuXG52YXIgUHJvbSA9IHIgPT4ge1xuICByZXR1cm4gJHEocik7XG59O1xuXG5Qcm9tLmFsbCA9ICRxLmFsbDtcblByb20ucmVqZWN0ID0gJHEucmVqZWN0O1xuXG5Qcm9tLnJhY2UgPSBwcm9tcyA9PiB7XG4gIHZhciBkb0Z1bGZpbGwsIGRvUmVqZWN0LCBwcm9tO1xuXG4gIHByb20gPSAkcSgoZnVsZmlsbCwgcmVqZWN0KSA9PiB7XG4gICAgZG9GdWxmaWxsID0gZnVsZmlsbDtcbiAgICBkb1JlamVjdCA9IHJlamVjdDtcbiAgfSk7XG5cbiAgcHJvbXMuZm9yRWFjaChwID0+IHAudGhlbihkb0Z1bGZpbGwsIGRvUmVqZWN0KSk7XG5cbiAgcmV0dXJuIHByb207XG59O1xuXG5Qcm9tLnJlc29sdmUgPSB2YWwgPT4ge1xuICByZXR1cm4gJHEud2hlbih2YWwpO1xufTtcblxuZXhwb3J0IHsgUHJvbSBhcyBQcm9taXNlIH07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9