angular.module("channels",[]),angular.module("channels").service("chanBuffers",function(){function t(t,n,e,r,i){for(var u=0;i>u;u+=1)e[u+r]=t[u+n]}var n={},e=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},r=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},u=function(){function n(t){i(this,n);var e="number"==typeof t?Math.max(1,t):1;this._tail=0,this._head=0,this._length=0,this._values=new Array(e)}return r(n,{pop:{value:function(){var t=void 0;return this.length?(t=null!==this._values[this._tail]?this._values[this._tail]:null,this._values[this._tail]=null,this._tail=(this._tail+1)%this._values.length,this._length-=1):t=null,t}},unshift:{value:function(t){this._values[this._head]=t,this._head=(this._head+1)%this._values.length,this._length+=1}},resizingUnshift:{value:function(t){this.length+1===this._values.length&&this.resize(),this.unshift(t)}},resize:{value:function(){var n=new Array(2*this._values.length);this._tail<this._head?(t(this._values,this._tail,n,0,this._head),this._tail=0,this._head=this.length,this._values=n):this._head<this._tail?(t(this._values,0,n,this._values.length-this._tail,this._head),this._tail=0,this._head=this.length,this._values=n):(this._tail=0,this._head=0,this._values=n)}},cleanup:{value:function(t){for(var n=0,e=this.length;e>n;n+=1){var r=this.pop();t(r)&&unshift(r)}}},length:{get:function(){return this._length}}}),n}(),o=function(){function t(n){i(this,t),this._buf=new u(n),this._size=n}return r(t,{remove:{value:function(){return this._buf.pop()}},add:{value:function(t){if(this.full)throw new Error("Cannot add to a full buffer.");this._buf.resizingUnshift(t)}},length:{get:function(){return this._buf.length}},full:{get:function(){return this._buf.length===this._size}}}),t}(),a=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length<this._size&&this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o),s=function(t){function n(){i(this,n),null!=t&&t.apply(this,arguments)}return e(n,t),r(n,{add:{value:function(t){this._buf.length===this._size&&this.remove(),this._buf.unshift(t)}},full:{get:function(){return!1}}}),n}(o);return n.DroppingBuffer=a,n.SlidingBuffer=s,n.FixedBuffer=o,n.RingBuffer=u,n}),angular.module("channels").service("chanChannels",["chanBuffers","chanDispatch","chanPromise",function(t,n,e){var r={},i=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},o=t.FixedBuffer,a=t.RingBuffer,s=n.Dispatch,f=e.Promise,c=function(){function t(n){u(this,t),this.offered=n,this.received=null,this.resolved=!1,this.active=!0,this.callbacks=[]}return i(t,{commit:{value:function(){var t=this;return function(n){if(t.resolved)throw new Error("Tried to resolve transactor twice!");return t.received=n,t.resolved=!0,t.callbacks.forEach(function(t){return t(n)}),t.offered}}},deref:{value:function(t){this.resolved?t(this.received):this.callbacks.push(t)}}}),t}(),h=new s,l=function(t,n){try{return t()}catch(e){return n(e)}},v=function(t){return function(n){return arguments.length?t(n):t()}},p=function(t){return console.error(t),!1},_={reduced:!0},g=function(){function t(n,e,r){var i=this,s=arguments;u(this,t);var f=function(t){return s.length?i._buffer.add(t):i._buffer};this._buffer=n instanceof o?n:new o(n||0),this._takers=new a(32),this._putters=new a(32),this._xformer=e?e(f):v(f),this._exHandler=r||p,this._isOpen=!0}return i(t,{_insert:{value:function(){var t=this,n=arguments;return l(function(){return t._xformer.apply(t,n)},this._exHandler)}},abort:{value:function(){for(;this._putters.length;){var t=this._putters.pop();t.active&&!function(){var n=t.commit();h.run(function(){return n(!0)})}()}this._putters.cleanup(function(){return!1})}},fill:{value:function(t){var n=this,e=void 0===arguments[1]?new c(t):arguments[1];return function(){if(null===t)throw new Error("Cannot put null to a channel.");if(!(e instanceof c))throw new Error("Expecting Transactor to be passed to fill");if(!e.active)return e;if(n.open||e.commit()(!1),!n._buffer.full){e.commit()(!0);for(var r=l(function(){return n._insert(t)===_},n._exHandler);n._takers.length&&n._buffer.length;){var i=n._takers.pop();i.active&&!function(){var t=n._buffer.remove(),e=i.commit();h.run(function(){return e(t)})}()}return r&&n.abort(),e}if(n._takers.length){for(var i=n._takers.pop();n._takers.length&&!i.active;)i=n._takers.pop();i&&i.active?!function(){e.commit()(!0);var n=i.commit();h.run(function(){return n(t)})}():n._putters.resizingUnshift(e)}else n._putters.resizingUnshift(e);return e}()}},put:{value:function(t,n){var e=this;return new f(function(r){e.fill(t,n).deref(r)})}},drain:{value:function(){var t=this,n=void 0===arguments[0]?new c:arguments[0];if(!(n instanceof c))throw new Error("Expecting Transactor to be passed to drain");if(!n.active)return n;if(this._buffer.length){for(var e=this._buffer.remove();!this._buffer.full&&this._putters.length;){var r=this._putters.pop();r.active&&!function(){var n=r.commit(),e=r.offered;h.run(function(){return n()});var i=l(function(){return t._insert(e)===_},t._exHandler);i===_&&t.abort()}()}n.commit()(e)}else if(this._putters.length){for(var r=this._putters.pop();this._putters.length&&!r.active;)r=this._putters.pop();r&&r.active?!function(){var t=n.commit(),e=r.commit(),i=r.offered;h.run(function(){return e()}),t(i)}():this.open?this._takers.resizingUnshift(n):(l(function(){return t._insert()},this._exHandler),txCb(this._buffer.length?this._buffer.remove():null))}else this._takers.resizingUnshift(n);return n}},take:{value:function(t){var n=this;return new f(function(e){n.drain(t).deref(e)})}},then:{value:function(t,n){return this.take().then(t,n)}},close:{value:function(){var t=this;if(this.open)for(this._isOpen=!1,0===this._putters.length&&l(function(){return t._insert()},this._exHandler);this._takers.length;){var n=this._takers.pop();n.active&&!function(){var e=t._buffer.length?t._buffer.remove():null,r=n.commit();h.run(function(){return r(e)})}()}}},into:{value:function n(t,e){function n(t){t===nil&&e?out.close():out.put(t).then(function(t){!t&&e?r.close():r.take().then(mapper)})}var r=this;return this.take().then(n),t}},open:{get:function(){return this._isOpen}}}),t}();return g.reduced=_,r.Channel=g,r.Transactor=c,r}]),angular.module("channels").service("chanDispatch",function(){var t={},n=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),e=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},r="function"==typeof setImmediate?function(t){return setImmediate(t)}:function(t){return setTimeout(t)},i=function(){function t(n){e(this,t),this._asynchronizer=n||r,this._queue=[]}return n(t,{run:{value:function(t){var n=this;this._queue.push(t),this._asynchronizer(function(){for(;n._queue.length;)n._queue.shift()()})}}}),t}();return t.Dispatch=i,t}),angular.module("channels").service("chanUtils",["chanChannels",function(t){function n(t){var n=[],e=new p;return t.map(function(t){if(Array.isArray(t)){var r;!function(){var i=new g(o,function(){n.forEach(function(t){return t.active=!1})});r=f(t,2);var u=r[0],o=r[1];u.put(o,i).then(function(){e.put([o,u])}),n.push(i)}()}else{var i=new g(!0,function(){n.forEach(function(t){return t.active=!1})});t.take(i).then(function(n){e.put([n,t])}),n.push(i)}}),e}function e(t){var n=new p;return setTimeout(function(){n.close()},t),n}function r(t,n){function e(){t.take().then(function(t){null===t?r.close():r.put(t).then(e)})}var r=new p(n);return e(),r}function i(t){return function(n){return function(e){return arguments.length?n(t(e)):n()}}}function u(t){return function(n){return function(e){return arguments.length?t(e)?n(e):void 0:n()}}}function o(t){var n=null,e=[];return function(r){return function(i){if(!arguments.length)return r(e);var u=t(i);if(null!==n&&u!==n){var o=e;return e=[i],n=u,r(o)}n=u,e.push(i)}}}function a(t){var n=0,e=[];return function(r){return function(i){if(!arguments.length)return r(e);if(e.push(i),n+=1,n%t===0){var u=e;return e=[],r(u)}}}}var s={},f=function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t)){for(var e,r=[],i=t[Symbol.iterator]();!(e=i.next()).done&&(r.push(e.value),!n||r.length!==n););return r}throw new TypeError("Invalid attempt to destructure non-iterable instance")},c=function(){function t(t,n){for(var e in n){var r=n[e];r.configurable=!0,r.value&&(r.writable=!0)}Object.defineProperties(t,n)}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),h=function m(t,n,e){var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var i=Object.getPrototypeOf(t);return null===i?void 0:m(i,n,e)}if("value"in r&&r.writable)return r.value;var u=r.get;return void 0===u?void 0:u.call(e)},l=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),n&&(t.__proto__=n)},v=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},p=t.Channel,_=t.Transactor,g=function(t){function n(t,e){v(this,n),h(Object.getPrototypeOf(n.prototype),"constructor",this).call(this,t),this.commitCb=e}return l(n,t),c(n,{commit:{value:function(){return this.commitCb(),h(Object.getPrototypeOf(n.prototype),"commit",this).call(this)}}}),n}(_);return s.alts=n,s.timeout=e,s.order=r,s.map=i,s.filter=u,s.partitionBy=o,s.partition=a,s}]),angular.module("channels").service("chanPromise",["$q",function(t){var n={},e=function(n){return t(n)};return e.all=t.all,e.reject=t.reject,e.race=function(n){var e,r,i;return i=t(function(t,n){e=t,r=n}),n.forEach(function(t){return t.then(e,r)}),i},e.resolve=function(n){return t.when(n)},n.Promise=e,n}]);
//# sourceMappingURL=data:application/json;base64,